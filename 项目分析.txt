一、项目介绍：
１、功能要求说明
a,用户可以登录，注册
    登录凭借用户密码即可
    注册要求用户必须填写用户名和密码，其他内容自定
    用户名不能够重复
b,用户数据要求使用数据库长期保存，数据报自定义
c,能够满足多个用户同时登陆操作的需求
d,功能分为客户端和服务端，客户主要发起请求，服务端处理请求，用户启动客户端即进入一级界面
　登录　注册　退出
e,用户登录后级进入二级界面
　查单词　查看历史记录　退出
查单词：输入单词，显示单词含义，可以循环查询，输入＃＃表示退出查询
查看历史记录：查看当前用户的历史查询记录
            name word time
退出：退出到一级界面，相当于注销

２、技术说明
详见电子词典功能分析
二、功能分析
服务器：登录、注册、查词、历史记录
客户端：打印界面  发出请求  接受反馈　　打印结果
技术点：　　并发：多进程  sys.fork
         套接字　 TCP 套接字
         数据库　　mysql
         查词　　　　文本查询、数据库查询

三、工作流程
１、创建数据库，存储数据
数据库：dictory
表名：(3个)
dictory1:  id(自增长auto_increment主键)  word(varchar not null)   value(text )
useinfo:   id(自增长主键)   name(varchar not null)   password(default 000000)
usedword:  id(自增长主键)   name (varchar not null)  
           word(varchar not null)           
           time (varchar,因为time.ctime()是一个字符串)   
存储数据方式:
dictory1存储数据　　　 见dict_insert.py 
   
        将dict.txt里的字典内容通过pymysql放入dictory1表格中

２、搭建通信框架，建立并发关系

服务端:　创建套接字　－－创建父子进程－－子进程等待处理客户端请求
－－父进程继续接受下一个客户端连接

客户端：　创建套接字　－－发起连接请求－－－级界面－－请求(登录、注册、退出)--登陆成功

进入二级界面－－请求(查词、历史记录)


３、功能实现
注册
    客户端
        １，输入注册信息
        ２，将注册信息信息发送给服务端
        ３，得到服务端反馈
    服务器
        １，接受请求
        ２．判断是否允许注册
        ３，将结果反馈给客户端
        ４，如果可以注册，将注册信息插入数据库

登录
    客户端
        1,输入姓名，密码
        ２,将登录信息发送给服务器
        ３，得到服务器反馈
        登录成功后，显示二级界面，进行后面的操作

    服务器
        １，接受请求
        ２，判断用户信息是否登陆过，用pymysql
        如果登陆过，反馈
        如果没有登陆过，向数据库里面插入登录信息,反馈给客户端



         
